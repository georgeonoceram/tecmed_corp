# Generated by Django 4.2.4 on 2023-08-23 13:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cargo_usr', models.CharField(choices=[('P', 'Presidente'), ('D', 'Diretor'), ('G', 'Gerente'), ('A', 'Analista'), ('T', 'Técnico'), ('E', 'Estagiário'), ('O', 'Terceiro'), ('R', 'Parceiro')], db_comment='Cargo que o usuario está registrado', max_length=1, verbose_name='Cargo do usuário')),
                ('tp_contrato_usr', models.CharField(choices=[('CL', 'CLT'), ('PJ', 'PJ'), ('ES', 'Estágiário'), ('PA', 'Parceiro')], db_comment='Tipo de Contrato do Usuário', max_length=2, verbose_name='Tipo de Contrato')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Clientes',
            fields=[
                ('cliente_pk', models.BigAutoField(auto_created=True, db_comment='Código Unico do Cliente', db_index=True, primary_key=True, serialize=False, verbose_name='Código único do cliente')),
                ('cnpj_cpf_cli', models.CharField(db_comment='CNPJ ou CPF do Cliente', max_length=20, verbose_name='CNPJ ou CPF do Cliente')),
                ('status_cad_cli', models.CharField(choices=[('B', 'Bloqueado'), ('L', 'Liberado'), ('A', 'Em Análise')], db_comment='Status do Cliente', max_length=1, verbose_name='Status Cadastral')),
                ('tp_cli', models.CharField(choices=[('J', 'Jurídica'), ('F', 'Física')], db_comment='Tipo de Cliente (PF, PJ)', max_length=1, verbose_name='Tipo de Cliente (PF, PJ)')),
                ('nm_jur_cli', models.CharField(db_comment='Nome Jurídico do Cliente', max_length=100, verbose_name='Nome Jurídico do Cliente')),
                ('nm_com_cli', models.CharField(db_comment='Nome da Comercial do Cliente', max_length=60, verbose_name='Nome Comercial do Cliente')),
                ('tel_cli', models.CharField(blank=True, db_comment='Telefone do Cliente', max_length=11, null=True, verbose_name='Telefone do Cliente')),
                ('end_cli', models.CharField(db_comment='Endereço do Cliente', max_length=40, verbose_name='Endereço do Cliente')),
                ('end_compl_cli', models.CharField(blank=True, db_comment='Complemento do Endereço do Cliente', max_length=30, null=True, verbose_name='Complemento Endereço Cliente')),
                ('end_bairro_cli', models.CharField(db_comment='Bairro do Endereço do Cliente', max_length=25, verbose_name='Bairro do Cliente')),
                ('end_cidade_cli', models.CharField(db_comment='Cidade do Endereço do Cliente', max_length=35, verbose_name='Cidade do Cliente')),
                ('end_cep_cli', models.CharField(db_comment='CEP do Endereço do Cliente', max_length=8, verbose_name='CEP do Cliente')),
                ('end_uf_cli', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AM', 'Amazonas'), ('AP', 'Amapa'), ('BA', 'Bahia'), ('CE', 'Ceara'), ('DF', 'Distrito federal'), ('ES', 'Espirito santo'), ('EX', 'Estrangeiro'), ('GO', 'Goias'), ('MA', 'Maranhao'), ('MG', 'Minas gerais'), ('MS', 'Mato grosso do sul'), ('MT', 'Mato grosso'), ('PA', 'Para'), ('PB', 'Paraiba'), ('PE', 'Pernambuco'), ('PI', 'Piaui'), ('PR', 'Parana'), ('RJ', 'Rio de janeiro'), ('RN', 'Rio grande do norte'), ('RO', 'Rondonia'), ('RR', 'Roraima'), ('RS', 'Rio grande do sul'), ('SC', 'Santa catarina'), ('SE', 'Sergipe'), ('SP', 'Sao paulo'), ('TO', 'Tocantins')], db_comment='Sigla e descrição do estado brasileiro - Estrangeiro: EX', max_length=2, verbose_name='Estado UF')),
                ('dt_ini_relac_cli', models.DateField(blank=True, db_comment='Data do início do relacionamento com cliente', null=True, verbose_name='Início do Relacionamento')),
                ('email_cli', models.EmailField(blank=True, db_comment='Endereço de e-mail do Cliente', max_length=254, null=True, verbose_name='E-mail do Cliente')),
                ('contato_cli', models.CharField(blank=True, db_comment='Contato no Cliente', max_length=30, null=True, verbose_name='Contato no Cliente')),
                ('ie_cli', models.CharField(blank=True, db_comment='Inscrição Estadual do Cliente', max_length=15, null=True, verbose_name='Inscrição Estadual')),
                ('im_cli', models.CharField(blank=True, db_comment='Inscrição Municipal do Cliente', max_length=10, null=True, verbose_name='Inscrição Municipal')),
                ('banco_cli', models.CharField(blank=True, db_comment='Banco do Cliente', max_length=3, null=True, verbose_name='Banco do Cliente')),
                ('agencia_cli', models.CharField(blank=True, db_comment='Agência do Cliente', max_length=6, null=True, verbose_name='Agência do Cliente')),
                ('ccorrente_cli', models.CharField(blank=True, db_comment='Conta Corrente do Cliente', max_length=10, null=True, verbose_name='Conta Corrente')),
                ('tp_pag_cli', models.CharField(blank=True, choices=[('TBC', 'Transferência Bancária'), ('BOL', 'Boleto Bancário'), ('PIX', 'PIX'), ('CCR', 'Cartão de Crédito'), ('CDB', 'Cartão de Débito'), ('CDG', 'Carteiras digitais'), ('DIN', 'Dinheiro')], db_comment='Tipo de Pagamento do Cliente', max_length=3, null=True, verbose_name='Tipo de Pagamento')),
                ('lim_cred_cli', models.DecimalField(db_comment='Limite de Crédito do Cliente', decimal_places=2, max_digits=8, verbose_name='Limite de Crédito')),
                ('venc_lim_cred_cli', models.DateField(db_comment='Data de Vencimento do Limite de Crédito do Cliente', verbose_name='Vencto.Lim.Créd.')),
                ('dt_cadastro_cli', models.DateField(auto_now_add=True, db_comment='Data do Cadastro do Cliente', verbose_name='Data do Cadastro')),
            ],
        ),
        migrations.CreateModel(
            name='Empresas',
            fields=[
                ('empresas_pk', models.BigAutoField(auto_created=True, db_comment='Código Unico da Empresa', db_index=True, primary_key=True, serialize=False, verbose_name='Código único da Empresa')),
                ('cod_empresa', models.CharField(db_comment='Código da empresa que será relalcionado com todo sistema', max_length=2, verbose_name='Cod.Empresa')),
                ('cod_filial', models.CharField(db_comment='Código da filial que será relalcionado com todo sistema', max_length=2, verbose_name='Cod.Filial')),
                ('nome_empresa', models.CharField(db_comment='Nome da empresa', max_length=40, verbose_name='Nome Empresa')),
                ('nome_filial', models.CharField(db_comment='Nome da Filial', max_length=40, verbose_name='Nome Filial')),
                ('nome_comercial_emp', models.CharField(db_comment='Nome da Comercial', max_length=60, verbose_name='Nome Comercial')),
                ('telefone_emp', models.CharField(db_comment='Telefone', max_length=11, verbose_name='Telefone')),
                ('cnpj_emp', models.CharField(db_comment='CNPJ da Empresa', max_length=20, verbose_name='CNPJ')),
                ('end_emp', models.CharField(db_comment='Endereço da Empresa', max_length=40, verbose_name='Endereço')),
                ('end_compl_emp', models.CharField(blank=True, db_comment='Complemento do Endereço da Empresa', max_length=30, null=True, verbose_name='Complemento Endereço')),
                ('end_bairro_emp', models.CharField(db_comment='Bairro do Endereço da Empresa', max_length=25, verbose_name='Bairro Empresa')),
                ('end_cidade_emp', models.CharField(db_comment='Cidade do Endereço da Empresa', max_length=35, verbose_name='Cidade da Empresa')),
                ('end_cep_emp', models.CharField(db_comment='CEP do Endereço da Empresa', max_length=8, verbose_name='CEP da Empresa')),
                ('end_uf_emp', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AM', 'Amazonas'), ('AP', 'Amapa'), ('BA', 'Bahia'), ('CE', 'Ceara'), ('DF', 'Distrito federal'), ('ES', 'Espirito santo'), ('EX', 'Estrangeiro'), ('GO', 'Goias'), ('MA', 'Maranhao'), ('MG', 'Minas gerais'), ('MS', 'Mato grosso do sul'), ('MT', 'Mato grosso'), ('PA', 'Para'), ('PB', 'Paraiba'), ('PE', 'Pernambuco'), ('PI', 'Piaui'), ('PR', 'Parana'), ('RJ', 'Rio de janeiro'), ('RN', 'Rio grande do norte'), ('RO', 'Rondonia'), ('RR', 'Roraima'), ('RS', 'Rio grande do sul'), ('SC', 'Santa catarina'), ('SE', 'Sergipe'), ('SP', 'Sao paulo'), ('TO', 'Tocantins')], db_comment='Sigla e descrição do estado brasileiro - Estrangeiro: EX', max_length=2, verbose_name='Estado UF')),
                ('cnae_emp', models.CharField(blank=True, db_comment='Código do CNAE da Empresa', max_length=8, null=True, verbose_name='CNAE da Empresa')),
                ('lic_licenca_emp', models.CharField(db_comment='Tipo de Licenciamento da Empresa', max_length=8, verbose_name='Licença da Empresa')),
                ('lic_chave_emp', models.CharField(db_comment='Chave do licenciamento da empresa', max_length=8, verbose_name='Chave do Licenciamento')),
                ('lic_checksum_emp', models.CharField(db_comment='Checksum Licenciamento da Empresa', max_length=8, verbose_name='Checksum Licenciamento')),
                ('lic_validade_emp', models.DateField(db_comment='Validade da chave de acesso da empresa', verbose_name='Validade da chave de acesso')),
            ],
        ),
        migrations.CreateModel(
            name='FamiliaCadastral',
            fields=[
                ('fam_cad_pk', models.BigAutoField(auto_created=True, db_comment='Chave Primária da Família Cadastral', db_index=True, primary_key=True, serialize=False, verbose_name='Chave Primária da Família Cadastral')),
                ('tp_fam_cad', models.CharField(choices=[('CLI', 'Cliente'), ('FOR', 'Fornecedor'), ('PFI', 'Pessoa Física'), ('PRD', 'Produtos')], db_comment='Tipo da Família Cadatral', max_length=3, verbose_name='Tipo da Família Cadatral')),
                ('desc_fam_cad', models.CharField(db_comment='Descrição da Família Cadastral', max_length=30, verbose_name='Descrição da Família Cadastral')),
            ],
        ),
        migrations.CreateModel(
            name='Fornecedores',
            fields=[
                ('fornecedor_pk', models.BigAutoField(auto_created=True, db_comment='Código Unico do Fornecedor', db_index=True, primary_key=True, serialize=False, verbose_name='Código único do Fornecedor')),
                ('cnpj_cpf_for', models.CharField(db_comment='CNPJ ou CPF do Fornecedor', max_length=20, verbose_name='CNPJ ou CPF do Fornecedor')),
                ('status_cad_for', models.CharField(choices=[('B', 'Bloqueado'), ('L', 'Liberado'), ('A', 'Em Análise')], db_comment='Status do Fornecedor', max_length=1, verbose_name='Status Cadastral')),
                ('tp_for', models.CharField(choices=[('J', 'Jurídica'), ('F', 'Física')], db_comment='Tipo de Fornecedor (PF, PJ)', max_length=1, verbose_name='Tipo de Fornecedor (PF, PJ)')),
                ('nm_jur_for', models.CharField(db_comment='Nome Jurídico do Fornecedor', max_length=100, verbose_name='Nome Jurídico do Fornecedor')),
                ('nm_com_for', models.CharField(db_comment='Nome da Comercial do Fornecedor', max_length=60, verbose_name='Nome Comercial do Fornecedor')),
                ('tel_for', models.CharField(blank=True, db_comment='Telefone do Fornecedor', max_length=11, null=True, verbose_name='Telefone do Fornecedor')),
                ('end_for', models.CharField(db_comment='Endereço do Fornecedor', max_length=40, verbose_name='Endereço do Fornecedor')),
                ('end_compl_for', models.CharField(blank=True, db_comment='Complemento do Endereço do Fornecedor', max_length=30, null=True, verbose_name='Complemento Endereço Fornecedor')),
                ('end_bairro_for', models.CharField(db_comment='Bairro do Endereço do Fornecedor', max_length=25, verbose_name='Bairro do Fornecedor')),
                ('end_cidade_for', models.CharField(db_comment='Cidade do Endereço do Fornecedor', max_length=35, verbose_name='Cidade do Fornecedor')),
                ('end_cep_for', models.CharField(db_comment='CEP do Endereço do Fornecedor', max_length=8, verbose_name='CEP do Fornecedor')),
                ('end_uf_for', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AM', 'Amazonas'), ('AP', 'Amapa'), ('BA', 'Bahia'), ('CE', 'Ceara'), ('DF', 'Distrito federal'), ('ES', 'Espirito santo'), ('EX', 'Estrangeiro'), ('GO', 'Goias'), ('MA', 'Maranhao'), ('MG', 'Minas gerais'), ('MS', 'Mato grosso do sul'), ('MT', 'Mato grosso'), ('PA', 'Para'), ('PB', 'Paraiba'), ('PE', 'Pernambuco'), ('PI', 'Piaui'), ('PR', 'Parana'), ('RJ', 'Rio de janeiro'), ('RN', 'Rio grande do norte'), ('RO', 'Rondonia'), ('RR', 'Roraima'), ('RS', 'Rio grande do sul'), ('SC', 'Santa catarina'), ('SE', 'Sergipe'), ('SP', 'Sao paulo'), ('TO', 'Tocantins')], db_comment='Sigla e descrição do estado brasileiro - Estrangeiro: EX', max_length=2, verbose_name='Estado UF')),
                ('dt_ini_relac_for', models.DateField(blank=True, db_comment='Data do início do relacionamento com Fornecedor', null=True, verbose_name='Início do Relacionamento')),
                ('email_for', models.EmailField(blank=True, db_comment='Endereço de e-mail do Fornecedor', max_length=254, null=True, verbose_name='E-mail do Fornecedor')),
                ('contato_for', models.CharField(blank=True, db_comment='Contato no Fornecedor', max_length=30, null=True, verbose_name='Contato no Fornecedor')),
                ('ie_for', models.CharField(blank=True, db_comment='Inscrição Estadual do Fornecedor', max_length=15, null=True, verbose_name='Inscrição Estadual')),
                ('im_for', models.CharField(blank=True, db_comment='Inscrição Municipal do Fornecedor', max_length=10, null=True, verbose_name='Inscrição Municipal')),
                ('banco_for', models.CharField(blank=True, db_comment='Banco do Fornecedor', max_length=3, null=True, verbose_name='Banco do Fornecedor')),
                ('agencia_for', models.CharField(blank=True, db_comment='Agência do Fornecedor', max_length=6, null=True, verbose_name='Agência do Fornecedor')),
                ('ccorrente_for', models.CharField(blank=True, db_comment='Conta Corrente do Fornecedor', max_length=10, null=True, verbose_name='Conta Corrente')),
                ('tp_pag_for', models.CharField(blank=True, choices=[('TBC', 'Transferência Bancária'), ('BOL', 'Boleto Bancário'), ('PIX', 'PIX'), ('CCR', 'Cartão de Crédito'), ('CDB', 'Cartão de Débito'), ('CDG', 'Carteiras digitais'), ('DIN', 'Dinheiro')], db_comment='Tipo de Pagamento do Fornecedor', max_length=3, null=True, verbose_name='Tipo de Pagamento')),
                ('lim_cred_for', models.DecimalField(db_comment='Limite de Crédito do Fornecedor', decimal_places=2, max_digits=8, verbose_name='Limite de Crédito')),
                ('venc_lim_cred_for', models.DateField(db_comment='Data de Vencimento do Limite de Crédito do Fornecedor', verbose_name='Vencto.Lim.Créd.')),
                ('dt_cadastro_for', models.DateField(auto_now_add=True, db_comment='Data do Cadastro do Fornecedor', verbose_name='Data do Cadastro')),
                ('emp_fil_fk_for', models.ForeignKey(db_comment='Empresa / Filial do Fornecedor', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.empresas', verbose_name='Empresa / Filial')),
                ('fam_cad_for', models.ForeignKey(db_comment='Empresa / Filial do Fornecedor', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.familiacadastral', verbose_name='Empresa / Filial')),
            ],
        ),
        migrations.CreateModel(
            name='Noc_Global_Choices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Vw_Global_Choices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RelAtTec',
            fields=[
                ('rat_pk', models.BigAutoField(auto_created=True, db_comment='Código Unico do RAT', db_index=True, primary_key=True, serialize=False, verbose_name='Código do RAT')),
                ('tp_rat', models.CharField(choices=[('A', 'Avulso'), ('C', 'Contrato'), ('G', 'Garantia')], db_comment='Tipo do Relatório de Atendimento Técnico', max_length=1, verbose_name='Tipo RAT')),
                ('dt_rat', models.DateField(db_comment='Data do Relatório de Atendimento Técnico', verbose_name='Data RAT')),
                ('dt_rat_sys', models.DateField(auto_now_add=True, db_comment='Data da Inclusão do Relatório de Atendimento Técnico', verbose_name='Data de inclusão RAT')),
                ('probl_rat', models.TextField(db_comment='Descrição do Problema Apresentado', max_length=300, verbose_name='Desc. do Problema Apresentado')),
                ('desc_rat', models.TextField(db_comment='Descrição do Atendimento do RAT', max_length=300, verbose_name='Descrição do Atendimento')),
                ('conclusao_rat', models.TextField(db_comment='Descrição da Conclusão Problema do RAT', max_length=300, verbose_name='Descrição da Conclusão Problema')),
                ('desc_pecas_rat', models.TextField(db_comment='Descrição das peças utilizadas no atendimento do RAT', max_length=300, verbose_name='Descrição das Peças do RAT')),
                ('hr_ini_rat', models.TimeField(db_comment='Hora Inicial do RAT', verbose_name='Hora Inicial do RAT')),
                ('hr_fim_rat', models.TimeField(db_comment='Hora Final do RAT', verbose_name='Hora Final do RAT')),
                ('vl_atend_rat', models.DecimalField(db_comment='Valor do atendimento do RAT', decimal_places=2, max_digits=8, verbose_name='Valor do atendimento')),
                ('vl_pecas_rat', models.DecimalField(db_comment='Valor das peças do RAT', decimal_places=2, max_digits=8, verbose_name='Valor das peças')),
                ('cod_cli_rat', models.ForeignKey(db_comment='Código Unico do cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.clientes', verbose_name='Código do Cliente')),
                ('emp_fil_fk_rat', models.ForeignKey(db_comment='Empresa / Filial do Cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.empresas', verbose_name='Empresa / Filial')),
                ('usr_rat', models.ForeignKey(db_comment='Código Unico do Técnico', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Código do Técnico')),
            ],
        ),
        migrations.CreateModel(
            name='Produtos',
            fields=[
                ('produto_pk', models.BigAutoField(auto_created=True, db_comment='Código do Produto', db_index=True, primary_key=True, serialize=False, verbose_name='Cód.Produto')),
                ('desc_prod', models.CharField(db_comment='Descrição do Produto', max_length=60, verbose_name='Desc.Produto')),
                ('tp_prod', models.CharField(choices=[('SRV', 'Serviço'), ('PRV', 'Produto de Venda'), ('AIM', 'Ativo Imobilizado'), ('MAN', 'Material de Manutenção'), ('EMB', 'Embalagem'), ('IMP', 'Imposto'), ('MCS', 'Material de Consumo'), ('MPR', 'Matéria Prima'), ('MOD', 'Mão de Obra')], db_comment='Tipo do Produto', max_length=3, verbose_name='Tipo Produto')),
                ('um_prod', models.CharField(choices=[('UN', 'Unidade'), ('CM', 'Centimetro'), ('CX', 'Caixa'), ('DZ', 'Duzia'), ('FD', 'Fardo'), ('FL', 'Folhas'), ('GR', 'Grama'), ('HR', 'Hora'), ('KG', 'Quilogram'), ('KT', 'Kit'), ('LT', 'Litro'), ('M2', 'Metro Qua'), ('M3', 'Metro Cub'), ('MH', 'Milheiro'), ('ML', 'Mililitro'), ('MT', 'Metro'), ('PL', 'Polegadas'), ('PT', 'Pacote'), ('RL', 'Rolo'), ('TB', 'Tambor'), ('TL', 'Tonelada')], db_comment='Tipo do Produto', max_length=2, verbose_name='Tipo Produto')),
                ('stauts_prod', models.CharField(choices=[('B', 'Bloqueado'), ('L', 'Liberado'), ('A', 'Em Análise')], db_comment='Status do Produto', max_length=1, verbose_name='Status Cadastral')),
                ('pic_produto', models.ImageField(blank=True, db_comment='Imagem do Produto', null=True, upload_to='prod', verbose_name='Imagem do Produto')),
                ('prc_venda_prod', models.DecimalField(db_comment='Preço de Venda do Produto', decimal_places=2, max_digits=8, verbose_name='Preço Venda')),
                ('custo_std_prod', models.DecimalField(db_comment='Custo Standad do Produto', decimal_places=2, max_digits=8, verbose_name='Custo Standad')),
                ('dt_ult_compra_prod', models.DateField(blank=True, db_comment='Data da Última Compra', null=True, verbose_name='Dt.Últ.Compra')),
                ('vl_ult_compra_prod', models.DecimalField(db_comment='Valor da Última Compra Produto', decimal_places=2, max_digits=8, verbose_name='Vl.Últ.Compra')),
                ('obs_prod', models.TextField(db_comment='Observação do Produto', max_length=300, verbose_name='Obs. do Produto')),
                ('cod_barras_prod', models.CharField(blank=True, db_comment='Código de Barras do Produto', max_length=20, null=True, verbose_name='Cód.Barras Prod.')),
                ('aliq_ipi_prod', models.DecimalField(blank=True, db_comment='Alíquota de IPI do Produto', decimal_places=2, max_digits=2, null=True, verbose_name='Alíquota de IPI')),
                ('aliq_iss_prod', models.DecimalField(blank=True, db_comment='Alíquota de ISS do Produto', decimal_places=2, max_digits=2, null=True, verbose_name='Alíquota de ISS')),
                ('aliq_csll_prod', models.DecimalField(blank=True, db_comment='Alíquota de CSLL do Produto', decimal_places=2, max_digits=2, null=True, verbose_name='Alíquota de CSLL')),
                ('aliq_cofins_prod', models.DecimalField(blank=True, db_comment='Alíquota de COFINS do Produto', decimal_places=2, max_digits=2, null=True, verbose_name='Alíquota de COFINS')),
                ('aliq_pis_prod', models.DecimalField(blank=True, db_comment='Alíquota de PIS do Produto', decimal_places=2, max_digits=2, null=True, verbose_name='Alíquota de PIS')),
                ('emp_fil_fk_prod', models.ForeignKey(db_comment='Empresa / Filial do Produto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.empresas', verbose_name='Empresa / Filial')),
                ('fam_cad_prod', models.ForeignKey(db_comment='Empresa / Filial do Produto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.familiacadastral', verbose_name='Empresa / Filial')),
                ('fornec_padrao_prod', models.ForeignKey(db_comment='Fornecedor Padrão do Produto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.fornecedores', verbose_name='Fornecedor Padrão')),
            ],
        ),
        migrations.AddIndex(
            model_name='empresas',
            index=models.Index(fields=['cod_empresa', 'cod_filial'], name='tm_global_e_cod_emp_d80f4a_idx'),
        ),
        migrations.AddField(
            model_name='clientes',
            name='emp_fil_fk_cli',
            field=models.ForeignKey(db_comment='Empresa / Filial do Cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.empresas', verbose_name='Empresa / Filial'),
        ),
        migrations.AddField(
            model_name='clientes',
            name='fam_cad_cli',
            field=models.ForeignKey(db_comment='Empresa / Filial do Cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.familiacadastral', verbose_name='Empresa / Filial'),
        ),
        migrations.AddField(
            model_name='users',
            name='emp_fil_fk_usr',
            field=models.ForeignKey(db_comment='Empresa / Filial do Cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tm_global.empresas', verbose_name='Empresa / Filial'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
